import { AfterContentInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';

import { ActivatedRoute, Router } from '@angular/router';

import { doLog, EDITING_FROM_DASHBOARD } from '@core/app-settings';

import { BusyService, DataManagerService, LayoutService } from '@core/services';

import { IAmountRanges, ICheckboxItem, IRadioOptionItem, IRateProgram } from '@shared/interfaces';

import { DialogRef, DialogService } from '@progress/kendo-angular-dialog';

import { ManageRateProgramDialogComponent, RateProgramDialogComponent, TermsListDialogComponent } from '@shared/components';

import * as _ from 'lodash';

import { Subscription } from 'rxjs';

import { FormControl, FormGroup, Validators } from '@angular/forms';

const LOG_TAG = '[othc/components/add-edit-rateprograms]';
const EDIT_RATE_PROGRAMS_PATH = '/othc/edit-rate-programs/';
const ADD_RATE_PROGRAMS_PATH = '/othc/add-rate-programs/';
const MANAGE_RATE_PROGRAMS_PATH = '/othc/manage-rate-programs/';
const DASHBOARD_PROGRAMS_PATH = '/othc/dashboard';
const EDITING_FROM_DASHBOARD_VALUE = 'yes';
const ALREADY_EXIST_MESSAGE = 'already exists';
const DUPLICATE_TITLE = 'Duplicate Rate Program';
const ERROR_TITLE = 'Error Rate Program';
const DEFAULT_MONTHLY = 'M';
const DEFERRALS_NONE_VALUE = '0';
const VALID_DEFERRALS = ['0', '30', '60', '90', '120', '180', '360'];
const DEFAULT_TERM = '60';
const PURCHASE_OPTIONS = [
	{ name: 'FMV', value: 'F', checked: false },
	{ name: 'FPO', value: 'P', checked: false },
	{ name: '$1', value: 'D', checked: false },
];
const PAYMENT_FREQUENCIES = [
	{ name: 'Monthly', value: 'M', checked: false, disabled: false },
	{ name: 'Quarterly', value: 'Q', checked: false, disabled: false },
	{ name: 'Semi-Annually', value: 'SA', checked: false, disabled: false },
	{ name: 'Annually', value: 'A', checked: false, disabled: false },
];

@Component({
	selector: 'app-add-edit-rate-programs',
	templateUrl: './add-edit-rate-programs.component.html',
	styleUrls: ['./add-edit-rate-programs.component.scss'],
})
export class AddEditRateProgramsComponent implements OnInit, OnDestroy, AfterContentInit {
	/**
	 * @property {Object} versionSelected Stores the current version data.
	 */
	public versionSelected;

	/**
	 * @property {Object} rateProgramSelected Stores the current rate program  .
	 */
	public rateProgramSelected: IRateProgram = ({} as any) as IRateProgram;

	/**
	 * @property {Object} originalRateProgram Stores the current rate program data to save it as a copy of the original data received .
	 */
	public originalRateProgram: IRateProgram = ({} as any) as IRateProgram;

	/**
	 * @property {String} currentRateProgramId Stores the current rate program id catched by the router params.
	 */
	public currentRateProgramId;

	/**
	 * @property {String} screenTitle='Create Rate Program' Displays the title screen based on the path received
	 */
	public screenTitle: string = 'Add Rate Program';

	/**
	 * @property {String} buttonAction button action text to display on dialogs
	 */
	public buttonAction: string;

	/**
	 * @property {Object} versionSelectedSubscription
	 * @private
	 */
	private versionSelectedSubscription: Subscription;

	/**
	 * @property {Object} rateDescriptionFormSubscription
	 * @private
	 */
	private rateDescriptionFormSubscription: Subscription;

	/**
	 * @property {Object} dialogReferenceSubscription
	 * @private
	 */
	private dialogReferenceSubscription: Subscription;

	/**
	 * @property {number} advancedPaymentsData input value for advanced payments
	 */
	public advancedPaymentsData: number = 0;

	/**
	 * @property {number} advancedSecurityData input value for advanced security payments
	 */
	public advancedSecurityData: number = 0;

	/**
	 * @property {number} additionalPointsData input value for aditional points
	 */
	public additionalPointsData: number = 0;

	/**
	 * @property {ICheckboxItem[]} purchaseOptions purchase options values to display
	 */
	public purchaseOptions: ICheckboxItem[] = PURCHASE_OPTIONS;

	/**
	 * @property {ICheckboxItem[]} paymentFrequencies payment frequencies values to display
	 */
	public paymentFrequencies: ICheckboxItem[] = PAYMENT_FREQUENCIES;
	/**
	 * @property {number[]} deferralValues Deferral values to display
	 */
	public deferralValues: IRadioOptionItem[];

	/**
	 * @property {ICheckboxItem[]} termsList Stores the terms to display as options to select for the rateProgram
	 */
	public termsList: ICheckboxItem[];

	/**
	 * @property {number[]} termsValues Term values to display
	 */
	public termsValues: IRadioOptionItem[];

	/**
	 * @property {DialogRef} dialogRef Stores the dialog reference to manage actions from dialogs.
	 * @private
	 */
	private dialogRef: DialogRef;

	/**
	 * @property {Object} dialogRefComponent stores the instance reference from the dialog component generated by the `DialogService`
	 * @private
	 */
	private dialogRefComponent;

	/**
	 * @property {FormGroup} rateDescriptionForm Creates and store the form group to validate input business rules.
	 */
	public rateDescriptionForm: FormGroup;

	/**
	 * @property {String} rateProgramName Stores the rate program name with ngModel to prevent errors with AoT on Edit mode.
	 */
	public rateProgramName: string;

	/**
	 * @property {Boolean} isValidName Stores and validates if the valid name is provided.
	 */
	public isValidName: boolean;

	/**
	 * @property {IAmountRanges[]} amountRangesData input amount ranges data from rate program
	 */
	public amountRangesData: IAmountRanges[] = [];

	/**
	 * @property {Object} name Stores the object data from input in DOM.
	 */
	public get name() {
		return this.rateDescriptionForm.get('name');
	}

	public disabledButton: boolean = true;
	public disabledTermsSubmitButton: boolean = true;

	/**
	 * @property {ElementRef} dialogActionsErrorDisplay Receives viewchild for ng-template
	 */
	@ViewChild('dialogActionsErrorDisplay') public dialogActionsErrorDisplay: any;

	constructor(
		private _activatedRoute: ActivatedRoute,
		private _busyService: BusyService,
		private _dataManager: DataManagerService,
		private _dialogService: DialogService,
		private _layoutService: LayoutService,
		private _router: Router
	) {}

	/**
	 * @method ngOnInit
	 * Respond when initialize app
	 * @return {void}
	 */
	public ngOnInit(): void {
		if (this._activatedRoute && this._activatedRoute.paramMap) {
			this._activatedRoute.paramMap.subscribe((_params) => {
				if (_params) {
					this.currentRateProgramId = _params.get('id') || null;
				}
				this.initialize();
			});
		}
		const namePattern = '^[-_ a-zA-Z0-9 \.#%&*()=+"\']+$';
		this.rateDescriptionForm = new FormGroup({
			name: new FormControl(this.rateProgramSelected.name, [
				Validators.required,
				Validators.pattern(namePattern),
				Validators.maxLength(100),
				Validators.minLength(5),
			]),
		});
	}

	/**
	 * @method ngOnDestroy
	 * Destroys the component and all its subscriptions
	 * @return {void}
	 */
	public ngOnDestroy(): void {
		this.versionSelectedSubscription.unsubscribe();
		this.rateDescriptionFormSubscription.unsubscribe();
	}

	/**
	 * @method ngAfterContentInit
	 * Respond after Angular projects external content into the component's view / the view that a directive is in.
	 * @return {void}
	 */
	public ngAfterContentInit() {
		if (this._dataManager.versionSelected$) {
			this.versionSelectedSubscription = this._dataManager.versionSelected$.subscribe((versionSelected) => {
				if (versionSelected && !this.versionSelected) {
					this.versionSelected = versionSelected;
					this.loadRateProgramData();
				}
			});
		}
		this.rateDescriptionFormSubscription = this.rateDescriptionForm.valueChanges.subscribe((updatedItem) => {
			const { name } = updatedItem || '';
			_.extend(this.rateProgramSelected, { name });
			this.validateName();
		});
	}

	/**
	 * @method addTermsToList
	 * Displays the dialog to select which terms do you want
	 * to add to the list of terms available for rateProgram.
	 * @param _event The click common event is needed for angular.
	 * @param _templateActions The template to process the dialog actions.
	 * @return {void}
	 */
	public addTermsToList(_event: any, _templateActions): void {
		this.buttonAction = 'Done';
		const dialogData = {
			title: 'Add Terms',
			content: TermsListDialogComponent,
			actions: _templateActions,
			height: 330,
			width: 300,
		};

		const rateCardTerms = this.versionSelected.terms || [];
		const rateProgramTerms = this.rateProgramSelected.terms || [];

		const termsList =
			rateCardTerms.map((_rateCardTerm) => {
				const checked = !!_.find(rateProgramTerms || [], (_rateProgramTerm) => _rateProgramTerm === _rateCardTerm) || false;
				return {
					name: _rateCardTerm,
					value: _rateCardTerm,
					checked,
				};
			}) || [];

		this.dialogRef = this._dialogService.open(dialogData);
		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.termsList = termsList;
		this.dialogReferenceSubscription = this.dialogRefComponent.disableButtonObservable.subscribe((_disable) => {
			this.disabledTermsSubmitButton = _disable;
		});
	}

	/**
	 * @method handleDialogSubmitButtonClick
	 * Handles the dialog submission button click event.
	 * @param _evt The default event from click event.
	 * @return {void}
	 */
	public handleDialogSubmitButtonClick(_evt) {
		this.termsList = this.dialogRefComponent.termsList.filter((term) => term.checked);
		_.extend(this.rateProgramSelected, {
			terms: this.termsList.map((_term) => _term.name) || [],
		});
		const { defaults } = this.rateProgramSelected || {};
		const { term: defaultTerm } = defaults || {};
		this.termsValues = this.termsList.map((deferral) => {
			const result: IRadioOptionItem = {
				name: deferral.name,
				value: deferral.value,
				checked: deferral.value === defaultTerm,
				group: 'terms',
			};
			return result;
		});
		this.checkDefaultTermExists();
		this.submitValidator();
		doLog && console.log(LOG_TAG, 'handleDialogSubmitButtonClick', this.rateProgramSelected);
		if (this.dialogReferenceSubscription) {
			this.dialogReferenceSubscription.unsubscribe();
		}
		this.dialogRef.close();
	}

	/**
	 * @method handleDialogCloseButtonClick
	 * Handles the dialog cancel button click event.
	 * @param _evt The default event from click event.
	 * @return {void}
	 */
	public handleDialogCloseButtonClick(_evt) {
		if (this.dialogReferenceSubscription) {
			this.dialogReferenceSubscription.unsubscribe();
		}
		this.dialogRef.close();
	}

	/**
	 * @method handleDialogOkButtonClick
	 * Handles the dialog submission button click event.
	 * @param _evt The default event from click event.
	 * @return {void}
	 */
	public handleDialogOkButtonClick(_evt) {
		if (localStorage.getItem(EDITING_FROM_DASHBOARD) === EDITING_FROM_DASHBOARD_VALUE) {
			localStorage.removeItem(EDITING_FROM_DASHBOARD);
			this._router.navigate([DASHBOARD_PROGRAMS_PATH]);
		} else {
			this.rateProgramSelected = _.clone(this.originalRateProgram);
			this.loadTemplateData();
			this._router.navigate([MANAGE_RATE_PROGRAMS_PATH]);
			this.dialogRef.close();
		}
	}

	/**
	 * @method onCancelClick
	 * Handles the cancel click event to clear
	 * the data displaying alert message to let the user know the actions
	 * @param _event The native click event required by angular
	 * @param _templateActions The dialog template actions to process the button clicks.
	 * @return {void}
	 */
	public onCancelClick(_event, _templateActions) {
		doLog && console.log(LOG_TAG, 'onCancelClick');
		if (_.isEqual(this.rateProgramSelected, this.originalRateProgram)) {
			if (localStorage.getItem(EDITING_FROM_DASHBOARD) === EDITING_FROM_DASHBOARD_VALUE) {
				localStorage.removeItem(EDITING_FROM_DASHBOARD);
				return this._router.navigate([DASHBOARD_PROGRAMS_PATH]);
			}
			this._router.navigate([MANAGE_RATE_PROGRAMS_PATH]);
		}
		this.buttonAction = 'Ok';
		const dialogData = {
			title: 'Cancel',
			content: RateProgramDialogComponent,
			actions: _templateActions,
			height: 165,
		};
		this.dialogRef = this._dialogService.open(dialogData);
		this.dialogRefComponent = this.dialogRef.content.instance;
	}

	/**
	 * @method onSaveClick
	 * Handles the save click event to send the request to the database
	 * the data displaying alert message to let the user know the actions
	 * @param _event The native click event required by angular
	 * @return {void}
	 */
	public async onSaveClick(_event) {
		doLog && console.log(LOG_TAG, 'onSaveClick', this.rateProgramSelected);
		this.validateName();
		if (!this.isValidName) {
			return;
		}
		if (this.rateProgramSelected && this.rateProgramSelected.id) {
			try {
				await this.updateRateProgram();
			} catch (_error) {
				doLog && console.warn(LOG_TAG, 'onSaveClick', _error);
			}
		} else {
			try {
				await this.createRateProgram();
			} catch (_error) {
				doLog && console.warn(LOG_TAG, 'onSaveClick', _error);
			}
		}
	}

	/**
	 * @method checkboxClick
	 * Listent and process the checkbox click event and updates the data from the property of the
	 * rateProgram that it belongs.
	 * @param {ICheckboxItem[]} _checkboxData Receives the checkbox data from the checkbox check event.
	 * @param {String} _propertyName Stores the property name to update from rateProgram data.
	 * @return {void}
	 */
	public checkboxClick(_checkboxData: ICheckboxItem[], _propertyName: string): void {
		doLog && console.log(LOG_TAG, 'checkboxClick', _checkboxData);
		this.rateProgramSelected[_propertyName] = _.chain(_checkboxData)
			.map((_item) => {
				if (_item.checked) {
					return _item.value;
				}
			})
			.filter((_item) => _item)
			.value();
		this.submitValidator();
	}

	/**
	 * @method radioOptionClick
	 * Listen and process the radio option click event and updates the data from the property of the
	 * rateProgram that it belongs.
	 * @param {ICheckboxItem[]} _radioOptionData Receives the radio option data from the radio check event.
	 * @param {String} _propertyName Stores the property name to update from rateProgram data.
	 * @return {void}
	 */
	public radioOptionClick(_radioOptionData: IRadioOptionItem, _propertyName: string): void {
		doLog && console.log(LOG_TAG, 'radioOptionClick', _radioOptionData);
		switch (_propertyName) {
			case 'termsOptions':
				_.extend(this.rateProgramSelected, {
					defaults: { term: _radioOptionData.value || '' },
				});
				break;
			case 'deferralOptions':
				_.extend(this.rateProgramSelected, {
					deferrals: Number(_radioOptionData.value) || 0,
				});
				const { value: optionValue = '' } = _radioOptionData || {};
				this.rateProgramSelected.paymentFrequencies = [];
				this.disabledPaymentFrequency(optionValue);
				break;
			default:
				break;
		}
		this.submitValidator();
	}

	/**
	 * @method disabledPaymentFrequency
	 * Validate payment frequency options to disabled depending deferral value:
	 * - Deferral with value "None" disabled  Payment Frequency "Monthly"
	 * - Deferral with any Day value disabled Payment Frequency "Quartely, Semi-Annually and Annually"
	 * @param {string} _radioOption receives deferrals value to validate payment frequencies check list
	 * @param {string[]} _paymentValue optional param receives payment frequencies array value
	 * @return {void}
	 */
	public disabledPaymentFrequency(_optionValue: string, _paymentValue?: string[]): void {
		doLog && console.log(LOG_TAG, 'disabledPaymentFrequency', _optionValue);
		if (_optionValue !== DEFERRALS_NONE_VALUE) {
			this.rateProgramSelected.paymentFrequencies = [DEFAULT_MONTHLY];
		}
		_.each(this.paymentFrequencies || [], (_payment) => {
			if (_optionValue === DEFERRALS_NONE_VALUE) {
				_payment.disabled = false;
				_payment.checked = _paymentValue && _paymentValue.indexOf(_payment.value) > -1 ? true : false;
				return;
			}
			_payment.disabled = _payment.value === DEFAULT_MONTHLY ? false : true;
			_payment.checked = _payment.value === DEFAULT_MONTHLY ? true : false;
		});
	}

	/**
	 * @method deleteOptionClick
	 * Listen and process the radio option click event and updates the data from the property of the
	 * rateProgram that it belongs.
	 * @param {ICheckboxItem[]} _radioOptionData Receives the radio option data from the radio check event.
	 * @return {void}
	 */
	public deleteOptionClick(_radioOptionData: IRadioOptionItem): void {
		doLog && console.log(LOG_TAG, 'deleteOptionClick', _radioOptionData);
		this.rateProgramSelected.terms = _.filter(
			this.rateProgramSelected.terms,
			(term) => Number(term) !== Number(_radioOptionData.value)
		);
		_.remove(this.termsValues, (term) => term.value === _radioOptionData.value);
		// Needed to tell the DOM to refresh and trigger the OnChanges of options-radio component
		this.termsValues = [...this.termsValues];
		this.rateProgramSelected.terms = [...this.rateProgramSelected.terms];
		this.checkDefaultTermExists();
		this.submitValidator();
	}

	/**
	 * @method createRateProgram
	 * Sends the request to create a new rate program to the API webservice.
	 * @return {void}
	 */
	private async createRateProgram() {
		if (!this.disabledButton) {
			this.showLoader();
			try {
				const result = await this._dataManager.createNewRateProgram(this.rateProgramSelected);
				if (result && !result.id) {
					return this.validateErrorDisplay(result);
				}
				this.rateProgramSelected = this.addRateProgramData(result);
				this._router.navigate([MANAGE_RATE_PROGRAMS_PATH]);
				this.hideLoader();
			} catch (_error) {
				throw new Error(_error);
			}
		}
	}

	/**
	 * @method updateRateProgram
	 * Sends the request to update the rate program data and save.
	 * @return {void}
	 */
	private async updateRateProgram() {
		if (!this.disabledButton) {
			this.showLoader();
			try {
				const result = await this._dataManager.updateRateProgram(this.rateProgramSelected);
				if (result && !result.id) {
					return this.validateErrorDisplay(result);
				}
				this.rateProgramSelected = this.addRateProgramData(result);
				this.originalRateProgram = result;
				if (localStorage.getItem(EDITING_FROM_DASHBOARD) === EDITING_FROM_DASHBOARD_VALUE) {
					localStorage.removeItem(EDITING_FROM_DASHBOARD);
					const { id = '' } = this._dataManager.versionSelected || {};
					await this._dataManager.fetchVersionSelected(id);
					return this._router.navigate([DASHBOARD_PROGRAMS_PATH]);
				}
				return this._router.navigate([MANAGE_RATE_PROGRAMS_PATH]);
			} catch (_error) {
				throw new Error(_error);
			}
		}
	}

	/**
	 * @method validateErrorDisplay
	 * Validate error message to display if already exist rate program or other error and diplay dialog with error message
	 * @param {string} _message receive error message
	 * @return {void}
	 */
	private validateErrorDisplay(_message: string) {
		let title = null;
		let height = 130;
		if (_message.indexOf(ALREADY_EXIST_MESSAGE) > -1) {
			title = DUPLICATE_TITLE;
			height = 195;
		}
		return this.openErrorDialog(this.dialogActionsErrorDisplay, _message, height, title);
	}

	/**
	 * @method submitValidator
	 * Validates business rules to enable the save button.
	 * @return {void}
	 */
	public submitValidator() {
		// if is an existing rate program, need to check any change in the data.
		this.disabledButton = _.isEqual(this.rateProgramSelected.id, undefined)
			? this.validateRequiredRateProgramData()
			: this.validateExistingRateProgramData();
	}

	/**
	 * @method validateRequiredRateProgramData
	 * Validates required information to enable save button.
	 * @return {boolen}
	 */
	private validateRequiredRateProgramData(): boolean {
		if (this.rateProgramSelected) {
			return (
				(this.rateProgramSelected.terms && this.rateProgramSelected.terms.length === 0) ||
				(this.rateProgramSelected.purchaseOptions && this.rateProgramSelected.purchaseOptions.length === 0) ||
				(this.rateProgramSelected.paymentFrequencies && this.rateProgramSelected.paymentFrequencies.length === 0) ||
				(this.rateProgramSelected.amountRanges && this.rateProgramSelected.amountRanges.length === 0) ||
				// TODO: Uncomment this if the rule is approved by Architecture Team
				// (this.rateProgramSelected.defaults && this.rateProgramSelected.defaults.term === '') ||
				(this.rateProgramSelected.name && this.rateProgramSelected.name === '') ||
				(this.name && this.name.invalid)
			);
		}
	}

	/**
	 * @method validateExistingRateProgramData
	 * Validates any change in the information (required/optional) to enable/disable save button in an existing rate program.
	 * @return {boolen}
	 */
	private validateExistingRateProgramData(): boolean {
		const valuesSelected = this.getRateProgramOptionalValues(this.rateProgramSelected);
		const originalValues = this.getRateProgramOptionalValues(this.originalRateProgram);
		const dataChanges =
			_.isEqual(valuesSelected, originalValues) &&
			this.compareRateProgramObject('purchaseOptions') &&
			this.compareRateProgramObject('paymentFrequencies') &&
			this.compareRateProgramObject('amountRanges') &&
			this.compareRateProgramObject('terms');
		const requiredDataCompleted = this.validateRequiredRateProgramData();
		// If data required is completed and there is not any changes, then return true to keep save button disabled
		// otherwise false to enable it.
		if (requiredDataCompleted && !dataChanges) {
			return true;
		}
		return !!dataChanges;
	}

	/**
	 * @method getRateProgramOptionalValues
	 * Destructuring IRateProgram object and return a new object with rate program optional values-
	 * @param {name, advancePayments, advanceSecurityPayments, points, deferrals}
	 * Values that method will destructure to create a new object based on them.
	 * @return {boolen}
	 */
	private getRateProgramOptionalValues({ name, advancePayments, advanceSecurityPayments, points, deferrals }): any {
		return {
			name,
			advancePayments,
			advanceSecurityPayments,
			points,
			deferrals,
		};
	}

	/**
	 * @method compareRateProgramObject
	 * Compare currentRateProgram against originalRateProgram, this function helps to compare arrays with same data
	 * but different sorted
	 * @param {rateProgramName}
	 * It Receives a name of one of the objects inside of IRateProgram
	 * @return {boolen}
	 */
	private compareRateProgramObject(rateProgramName: string): boolean {
		let originalRateProgram: any;
		let currentRateProgram: any;
		switch (rateProgramName) {
			case 'purchaseOptions':
				originalRateProgram = this.originalRateProgram.purchaseOptions;
				currentRateProgram = this.rateProgramSelected.purchaseOptions;
				break;
			case 'paymentFrequencies':
				originalRateProgram = this.originalRateProgram.paymentFrequencies;
				currentRateProgram = this.rateProgramSelected.paymentFrequencies;
				break;
			case 'amountRanges':
				originalRateProgram = this.originalRateProgram.amountRanges;
				currentRateProgram = this.rateProgramSelected.amountRanges;
				break;
			case 'terms':
				originalRateProgram = this.originalRateProgram.terms;
				currentRateProgram = this.rateProgramSelected.terms;
				break;
			default:
				// Nothing to do
				return false;
		}
		return _.isEqual(currentRateProgram.sort(), originalRateProgram.sort());
	}

	/**
	 * @method loadRateProgramData
	 * Loads the rate program data to populate the forms inputs with ngModel.
	 * If user is editing it saves the original version in a variable to restore if is needed.
	 * Otherwise returns the empty object.
	 * @return {void}
	 */
	private async loadRateProgramData() {
		doLog && console.log(LOG_TAG, 'loadRateProgramData', this.currentRateProgramId, this.versionSelected);

		if (!this.currentRateProgramId || !this.versionSelected) {
			this.rateProgramSelected = ({
				versionId: this.versionSelected.id,
				name: '',
				points: 0,
				terms: [],
				defaults: {
					term: '',
				},
				amountRanges: [],
				purchaseOptions: [],
				advancePayments: 0,
				advanceSecurityPayments: 0,
				paymentFrequencies: [],
				deferrals: 0,
			} as any) as IRateProgram;
			this.originalRateProgram = _.clone(this.rateProgramSelected);
			this.loadTemplateData();
			this.hideLoader();

			return;
		}
		const { ratePrograms = [], id = 0 } = this.versionSelected || {};
		this.showLoader();
		const rateProgram = {
			id: this.currentRateProgramId,
			versionId: id,
		};
		const existRateProgram = _.some(ratePrograms || [], (_rateProgram) => _rateProgram.id === this.currentRateProgramId);
		if (existRateProgram) {
			const rateProgramSelected = await this._dataManager.getRateProgram(rateProgram);
			this.rateProgramSelected = this.addRateProgramData(rateProgramSelected);
			this.originalRateProgram = _.clone(this.rateProgramSelected);
			this.loadTemplateData();
			const name = this.rateProgramSelected.name || '';
			this.name.setValue(name);
			this.validateName();
		}
		this.hideLoader();
	}

	/**
	 * @method updateCheckboxListChecked
	 * Update checkbox list from data received
	 * @param {ICheckboxItem[]} _checkboxlist receives checkbox list data
	 * @param {string[]} _data receives data for check values to checkboxlist
	 * @return {void}
	 */
	public updateCheckboxListChecked(_checkboxlist: ICheckboxItem[], _data: string[]): ICheckboxItem[] {
		return _.chain(_checkboxlist)
			.map((_item, _index) => {
				_item.checked = !!_data.includes(_item.value);
				return _item;
			})
			.value();
	}

	/**
	 * @method updateIncreasePoints
	 * update data from increase points to respective rate program property
	 * @param {number} _data receives data from increase points output
	 * @param {string} _propertyName Stores the property name to update from rateProgram data.
	 * @return {void}
	 */
	public updateIncreasePoints(_data: number, _propertyName: string): void {
		this.rateProgramSelected[_propertyName] = _data;
		this.submitValidator();
	}

	/**
	 * @method hasDataToDisplay
	 * Validates if property from rateProgramSelected has data in place to display in the sidebar.
	 * @param {String} _propertyName Name of the property to validate in the rateProgramSelected.
	 * @return {Boolean}
	 */
	public hasDataToDisplay(_propertyName: string = null): boolean {
		if (!_propertyName) {
			return !!(
				this.rateProgramSelected &&
				((this.rateProgramSelected.name && this.rateProgramSelected.name !== '') ||
					(this.rateProgramSelected.points && this.rateProgramSelected.points > 0) ||
					(this.rateProgramSelected.terms && this.rateProgramSelected.terms.length > 0) ||
					(this.rateProgramSelected.advancePayments && this.rateProgramSelected.advancePayments > 0) ||
					(this.rateProgramSelected.advanceSecurityPayments && this.rateProgramSelected.advanceSecurityPayments > 0) ||
					(this.rateProgramSelected.paymentFrequencies && this.rateProgramSelected.paymentFrequencies.length > 0) ||
					(this.rateProgramSelected.deferrals && this.rateProgramSelected.deferrals > 0) ||
					(this.rateProgramSelected.purchaseOptions && this.rateProgramSelected.purchaseOptions.length > 0) ||
					(this.rateProgramSelected.amountRanges && this.rateProgramSelected.amountRanges.length > 0))
			);
		}
		const propertyData = this.rateProgramSelected[_propertyName] || null;
		if (_.isArray(propertyData)) {
			return !!(propertyData.length > 0);
		} else {
			return !!(propertyData !== null && propertyData !== false && propertyData > 0);
		}
	}

	/**
	 * @method showLoader
	 * Displays the `LoadingComponent` subscribing as true the observable value.
	 * @return {void}
	 */
	private showLoader() {
		this._busyService.showLoading();
	}

	/**
	 * @method hideLoader
	 * Hides the `LoadingComponent` subscribing as false the observable value.
	 * @return {void}
	 */
	private hideLoader() {
		this._busyService.hideLoading();
	}

	/**
	 * @method Initialize
	 * Initializes the component validating the current path
	 * to redirect the user to add rate programs if edit program id is empty.
	 * @return {void}
	 */
	private initialize() {
		const currentURL = this._router.url;
		if (currentURL.includes(EDIT_RATE_PROGRAMS_PATH) && (!this.currentRateProgramId || this.currentRateProgramId === '')) {
			this._router.navigate([ADD_RATE_PROGRAMS_PATH]);
			return;
		}
		this.screenTitle = currentURL.includes(EDIT_RATE_PROGRAMS_PATH) ? 'Edit Rate Program' : this.screenTitle;
		this._layoutService.setNavControlsReadOnly(true);
	}

	/**
	 * @method validateName
	 * Validates if rate program name is valid
	 * @return {void}
	 */
	private validateName() {
		if (this.rateProgramSelected && this.rateProgramSelected.id && this.rateProgramSelected.name) {
			this.isValidName = true;
		} else if (this.rateProgramSelected && this.rateProgramSelected.name && !this.name.invalid) {
			this.isValidName = true;
		} else {
			this.isValidName = false;
		}
		this.submitValidator();
		doLog && console.log(LOG_TAG, 'validateName', this.isValidName, this.rateProgramSelected);
	}

	/**
	 * @method checkDefaultTermExists
	 * Checks if the selected default term still applies, deletes the default if it doesn't.
	 * @return {void}
	 */
	public checkDefaultTermExists() {
		if (!this.rateProgramSelected) {
			return;
		}
		const { defaults, terms } = this.rateProgramSelected || {};
		const { term: defaultTerm } = defaults || {};
		terms.sort((_a, _b) => Number(_a) - Number(_b));
		const found = !this.currentRateProgramId
			? this.getDefaultTermValue(terms)
			: _.find(terms, (_term) => _term === defaultTerm) || this.getDefaultTermValue(terms);
		_.extend(this.rateProgramSelected, {
			defaults: {
				term: found,
			},
		});
		this.populateRadioLists('terms', found);
	}

	/**
	 * @method getDefaultValue
	 * Find default term value or next lowest value than it
	 * @param {string[]} _terms receives terms data
	 * @return {string}
	 */
	public getDefaultTermValue(_terms): string {
		if (!_.includes(_terms, DEFAULT_TERM)) {
			const defaultValue = _.chain(_terms)
				.map((_term) => {
					if (Number(_term) < Number(DEFAULT_TERM)) {
						return Number(_term);
					}
					return false;
				})
				.max()
				.toString()
				.value();
			return defaultValue === 'false' ? _terms[0] : defaultValue;
		}
		return DEFAULT_TERM;
	}

	/**
	 * @method loadTemplateData
	 * Populates the data to create the modules in the template.
	 * @return {void}
	 */
	private loadTemplateData() {
		const {
			amountRanges,
			advancePayments,
			advanceSecurityPayments,
			points,
			purchaseOptions,
			paymentFrequencies,
			name,
			deferrals,
			defaults,
		} = this.rateProgramSelected;
		const defaultTerm = defaults.term || '';
		this.advancedPaymentsData = advancePayments || 0;
		this.advancedSecurityData = advanceSecurityPayments || 0;
		this.rateProgramName = name || '';
		this.additionalPointsData = points || 0;
		this.purchaseOptions = this.updateCheckboxListChecked(this.purchaseOptions, purchaseOptions);
		this.paymentFrequencies = this.updateCheckboxListChecked(this.paymentFrequencies, paymentFrequencies);
		this.amountRangesData = amountRanges;
		this.populateRadioLists('deferrals', deferrals);
		this.populateRadioLists('terms', defaultTerm);
		this.disabledPaymentFrequency(deferrals.toString(), paymentFrequencies);
	}

	/**
	 * @method populateRadioLists
	 * Creates the radio button lists based on parameters to display on the template.
	 * @param {String} _listType Stores the type of list to create.
	 * @param {Any} _default Stores the default value to mark as checked in the template.
	 * @return {void}
	 */
	private populateRadioLists(_listType: string, _default: any = null) {
		switch (_listType) {
			case 'deferrals':
				this.deferralValues = VALID_DEFERRALS.map((deferral) => {
					const deferralName = Number(deferral) > 0 ? `${deferral} Days` : 'None';
					return {
						name: deferralName,
						value: deferral,
						checked: _default === Number(deferral),
						group: 'deferrals',
					};
				});
				break;
			case 'terms':
				this.termsValues = this.rateProgramSelected.terms.map((term) => {
					const result: IRadioOptionItem = {
						name: term,
						value: term,
						checked: term === _default,
						group: 'terms',
					};
					return result;
				});
				break;
			default:
				// nothing to do
				break;
		}
	}

	/**
	 * @method addRateProgramData
	 * Updates the rateProgram with data from database
	 * This method was created to prevent the error message for residuals
	 * and other properties that are not needed for rateprogram screen.
	 * @param {IRateProgram} _currentRateProgram The current data received from the API.
	 * @return {IRateProgram}
	 */
	private addRateProgramData(_currentRateProgram) {
		const rateProgram = ({
			id: _currentRateProgram.id,
			versionId: _currentRateProgram.versionId,
			name: _currentRateProgram.name,
			points: _currentRateProgram.points,
			terms: _currentRateProgram.terms,
			defaults: _currentRateProgram.defaults,
			amountRanges: _currentRateProgram.amountRanges,
			purchaseOptions: _.map(_currentRateProgram.purchaseOptions || [], (purchaseOption) => purchaseOption.toUpperCase()),
			advancePayments: _currentRateProgram.advancePayments,
			advanceSecurityPayments: _currentRateProgram.advanceSecurityPayments,
			paymentFrequencies: _.map(_currentRateProgram.paymentFrequencies || [], (paymentFrequency) => paymentFrequency.toUpperCase()),
			deferrals: _currentRateProgram.deferrals,
		} as any) as IRateProgram;
		return rateProgram;
	}

	/**
	 * @method updateAmountRanges
	 * Update amount ranges from rateProgramSelected data
	 * @param {object} _data receives data from amount finance component
	 * @param {string} _propertyName receives name field from amount finance component
	 * @return {void}
	 */
	public updateAmountRanges(_data, _propertyName: string): void {
		this.rateProgramSelected[_propertyName] = _.chain(_data)
			.map((_item) => {
				return {
					min: _item.minValue,
					max: _item.maxValue,
				};
			})
			.value();
		this.submitValidator();
	}
	/**
	 * @method openErrorDialog
	 * Method that opens dialog with error message
	 * @param {TemplateRef} _templateActions dialogActions for the template that should be displayed.
	 * @param {String} _message receives error message
	 * @param {Number} _height the height of the dialog pop up
	 * @param {title} _title title for dialog
	 * @return {void}
	 */
	private openErrorDialog(_templateActions, _message, _height, _title?) {
		const title = _title ? _title : ERROR_TITLE;
		this.dialogRef = this._dialogService.open({
			title,
			content: ManageRateProgramDialogComponent,
			actions: _templateActions,
			height: _height,
		});

		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.message = _message;
	}

	/**
	 * @method handleDialogErrorOkClick
	 * Reload page for refresh rate program list an
	 * @return {void}
	 */
	public handleDialogErrorOkClick() {
		window.location.reload();
	}
}
