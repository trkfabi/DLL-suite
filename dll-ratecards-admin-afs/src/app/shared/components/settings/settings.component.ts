import { AfterViewInit, Component, Input, OnInit, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';

import { Router } from '@angular/router';

import { fromEvent, Observable, Subscription } from 'rxjs';

import * as _ from 'lodash';

import { DEFAULT_PERMISSION, doLog } from '@core/index';

import { AuthService, BusyService, DataManagerService, LayoutService } from '@core/services';

import { DialogCloseResult, DialogRef, DialogService } from '@progress/kendo-angular-dialog';

import {
	ErrorDialogComponent,
	ProductCategoriesDialogComponent,
	SettingRateCardDialogComponent,
	SettingVendorCodesDialogComponent,
	TermsDialogComponent,
	VendorDialogComponent,
} from '@shared/components/shared';

import { IDialogActionType } from '@shared/interfaces';

const LOG_TAG = '[shared/components/settings]';
const RATECARD_ID_STRING = 'rateCardId';

@Component({
	selector: 'app-settings',
	templateUrl: './settings.component.html',
	styleUrls: ['./settings.component.scss'],
})
export class SettingsComponent implements OnInit {
	/**
	 * @property {Object} rateCardList Stores the ratecards list from services.
	 */
	public rateCardList: any[];

	/**
	 * @property {Object} vendorList Stores the vendors list from ratecards.
	 */
	public vendorList: any[];

	/**
	 * @property {Object[]} vendorsFiltered Stores product filtered by category selected.
	 */
	public vendorsFiltered: any[];

	/**
	 * @property {String} validPath Stores the valid path based on user group to return to dashboard
	 */
	public validPath: string;

	/**
	 * @property {String} buttonAction Button action text to display on dialogs.
	 */
	public buttonAction: string;

	/**
	 * @property {Object} dialogRef stores the reference to the dialog generated by the `DialogService`
	 */
	public dialogRef: DialogRef;

	/**
	 * @property {boolean} isRateCardSelected Status of ratecard selected
	 */
	public isRateCardSelected: boolean = false;

	/**
	 * @property {Object} rateCardSelected Temporary ratecard selected
	 */
	public rateCardSelected;

	/**
	 * @property {Object} dialogRefComponent stores the instance reference from the dialog component generated by the `DialogService`
	 * @private
	 */
	private dialogRefComponent;

	constructor(
		private _auth: AuthService,
		private _busyService: BusyService,
		private _dataManager: DataManagerService,
		private _dialogService: DialogService,
		private _layoutService: LayoutService,
		private _router: Router
	) {}

	ngOnInit(): void {
		this.initialize();
	}

	/**
	 * @method loadData
	 * Description
	 * @private
	 * @return {void}
	 */
	private async loadData() {
		doLog && console.log(LOG_TAG, 'loadData');
		const rateCardsWithVendors = await this._dataManager.listAllRateCardsAndVendors();
		this.vendorList = [];
		this.rateCardList = rateCardsWithVendors;

		if (!this.rateCardList || this.rateCardList.length === 0) {
			this.hideLoader();
			return;
		}

		_.each(rateCardsWithVendors, (_rateCard) => {
			if (_rateCard.vendorCodes) {
				this.vendorList.push(..._rateCard.vendorCodes);
			}
		});
		this.reorderRateCards();
		this.selectRateCard(this.rateCardList[0]);
		this.hideLoader();
	}

	/**
	 * @method reorderRateCards
	 * Reorder the ratecards indexes by alphanumeric name.
	 * @private
	 * @return {void}
	 */
	public reorderRateCards() {
		// Order the array using ascendent way
		if (!this.rateCardList) {
			return;
		}
		this.rateCardList.sort((a, b) => {
			const aName = a.name;
			const bName = b.name;
			if (aName.toLowerCase() > bName.toLowerCase()) {
				return 1;
			}
			if (aName.toLowerCase() < bName.toLowerCase()) {
				return -1;
			}
			// a must be equal to b
			return 0;
		});
	}

	/**
	 * @method addRateCard
	 * Adds ratecards items to the rateCardList array. It also sends the request to update the rateCards from the user.
	 * @param _evt The default event from click event.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public addRateCardClick(_evt, _dialogActions) {
		doLog && console.log(LOG_TAG, 'addRateCardClick', _dialogActions);
		this.buttonAction = 'Save';
		const dialogData = {
			title: 'New Rate Card',
			content: SettingRateCardDialogComponent,
			actions: _dialogActions,
			height: 208.5,
		};
		const rateCard = {
			id: null,
			name: null,
		};

		const actionType: IDialogActionType = {
			action: 'add',
			type: 'ratecard',
		};

		this.openRateCardsDialog(dialogData, rateCard, actionType);
	}

	/**
	 * @method editRateCardClick
	 * Edits the rateCard's name
	 * @param _evt The default event from click event.
	 * @param _rateCard The rateCards data to update.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public editRateCardClick(_evt, _rateCard, _dialogActions) {
		doLog && console.log(LOG_TAG, 'editRateCardClick');
		if (!_rateCard) {
			return;
		}
		this.buttonAction = 'Save';
		const dialogData = {
			title: 'Edit Rate Card',
			content: SettingRateCardDialogComponent,
			actions: _dialogActions,
			height: 208.5,
		};
		const actionType: IDialogActionType = {
			action: 'edit',
			type: 'ratecard',
		};
		this.openRateCardsDialog(dialogData, _rateCard, actionType);
	}

	/**
	 * @method deleteRateCardClick
	 * Deletes the rateCard Item from array.
	 * @param _evt The default event from click event.
	 * @param _rateCard The rateCards data to update.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public deleteRateCardClick(_evt, _rateCard, _dialogActions) {
		if (!_rateCard) {
			return;
		}
		this.buttonAction = 'Delete';
		const dialogData = {
			title: 'Delete Rate Card',
			content: SettingRateCardDialogComponent,
			actions: _dialogActions,
			height: 195,
		};
		const actionType: IDialogActionType = {
			action: 'delete',
			type: 'ratecard',
		};
		this.openRateCardsDialog(dialogData, _rateCard, actionType);
	}

	/**
	 * @method openRateCardsDialog
	 * Opens RateCard Dialog to Manage its data
	 * @private
	 * @param _dialogData The dialog data to create the dialog window
	 * @param _rateCard The rateCard data to process.
	 * @param _actionType {String} The action type to execute with the rateCard.
	 * @return {void}
	 */
	private openRateCardsDialog(_dialogData, _rateCard, _actionType) {
		this.dialogRef = this._dialogService.open(_dialogData);
		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.item = _rateCard;
		this.dialogRefComponent.rateCardList = this.rateCardList;
		this.dialogRefComponent.actionType = _actionType;
		this.dialogRefComponent.isRateNameDuplicated = true;
	}

	/**
	 * @method selectRateCard
	 * Selects ratecard from list to populate own vendors.
	 * @param _rateCard The ratecard data to mark as active.
	 * @return {void}
	 */
	public selectRateCard(_rateCard) {
		doLog && console.log(LOG_TAG, 'selectRateCard', _rateCard);
		if (!_rateCard) {
			return;
		}
		this.isRateCardSelected = true;
		this.rateCardSelected = _rateCard;
		this.filterVendors(_rateCard.id);
		localStorage.setItem(RATECARD_ID_STRING, _rateCard.id);
	}

	/**
	 * @method removeRateCardFromList
	 * Removes the rateCard deleted from API in the current rateCards List to prevent reload the screen.
	 * @param _rateCardDeleted The rateCard to remove from the list.
	 * @return {void}
	 */
	public removeRateCardFromList(_rateCardDeleted) {
		if (!_rateCardDeleted) {
			return;
		}
		const index = _.findIndex(this.rateCardList, (_rateCard) => _rateCard.id === _rateCardDeleted.id);

		if (index > -1) {
			this.rateCardList.splice(index, 1);
		}
		// Remove vendorCodes from current vendor list to prevent reload the screen
		const vendorsFilteredLength = this.vendorsFiltered.length || 0;
		if (vendorsFilteredLength > 0) {
			for (let i = 0; i < vendorsFilteredLength; i += 1) {
				const currentFilterVendorToDelete = this.vendorsFiltered[i];

				const vendorIndex = _.findIndex(this.vendorList, (_vendor) => _vendor.id === currentFilterVendorToDelete.id);

				if (vendorIndex > -1) {
					this.vendorList.splice(vendorIndex, 1);
				}
			}
		}
		this.rateCardSelected = null;
		this.vendorsFiltered = [];
		this.isRateCardSelected = false;
		const rateCardSelected = this.rateCardList[0] || null;
		this.selectRateCard(rateCardSelected);
	}

	/**
	 * @method openVendorCodesDialog
	 * Opens RateCard Dialog to Manage its data
	 * @private
	 * @param _dialogData The dialog data to create the dialog window
	 * @param _rateCard The rateCard data to process.
	 * @param _actionType {String} The action type to execute with the rateCard.
	 * @return {void}
	 */
	private openVendorCodesDialog(_dialogData, _vendorCode, _actionType) {
		this.dialogRef = this._dialogService.open(_dialogData);
		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.item = _vendorCode;
		this.dialogRefComponent.rateCardList = this.rateCardList;
		this.dialogRefComponent.vendorCodes = this.vendorList;
		this.dialogRefComponent.actionType = _actionType;
		this.dialogRefComponent.isVendorNameDuplicated = true;
	}

	/**
	 * @method addVendorCodeClick
	 * Adds vendorCodes items to the vendorsList array from the rateCard Selected.
	 * It also sends the request to update the vendorsList data from the rateCard Selected.
	 * @param _evt The default event from click event.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public addVendorCodeClick(_evt, _dialogActions) {
		doLog && console.log(LOG_TAG, 'addVendorCodeClick', _dialogActions);
		this.buttonAction = 'Save';
		const dialogData = {
			title: 'New Vendor Code',
			content: SettingVendorCodesDialogComponent,
			actions: _dialogActions,
			height: 268.5,
		};

		const vendorCode = {
			name: null,
			points: 0,
			rateCardId: this.rateCardSelected.id,
		};

		const actionType: IDialogActionType = {
			action: 'add',
			type: 'vendor',
		};

		this.openVendorCodesDialog(dialogData, vendorCode, actionType);
	}

	/**
	 * @method editVendorClick
	 * Edits the vendor data from the rateCard selected.
	 * It also sends the request to the database to update the values.
	 * @param _evt The default event from click event.
	 * @param _vendor The vendorList data to update.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public editVendorClick(_evt, _vendor, _dialogActions) {
		doLog && console.log(LOG_TAG, 'editRateCardClick', JSON.stringify(_vendor));
		if (!_vendor) {
			return;
		}
		this.buttonAction = 'Save';
		const dialogData = {
			title: 'Edit Vendor Code',
			content: SettingVendorCodesDialogComponent,
			actions: _dialogActions,
			height: 268.5,
		};
		const actionType: IDialogActionType = {
			action: 'edit',
			type: 'vendor',
		};
		this.openVendorCodesDialog(dialogData, _vendor, actionType);
	}

	/**
	 * @method deleteVendorClick
	 * Deletes the vendor code Item from array.
	 * @param _evt The default event from click event.
	 * @param _vendor The vendorList data to update.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public deleteVendorClick(_evt, _vendor, _dialogActions) {
		if (!_vendor) {
			return;
		}
		this.buttonAction = 'Delete';
		const dialogData = {
			title: 'Delete Vendor Code',
			content: SettingVendorCodesDialogComponent,
			actions: _dialogActions,
			height: 195,
		};
		const actionType: IDialogActionType = {
			action: 'delete',
			type: 'vendor',
		};
		this.openVendorCodesDialog(dialogData, _vendor, actionType);
	}

	/**
	 * @method isVendorActive
	 * Validates if vendor is still active otherwise is deleted and screen should not render it.
	 * @param _vendor The vendor data to validate.
	 * @return {boolean}
	 */
	public isVendorActive(_vendor) {
		return _vendor.rateCardID === this.rateCardSelected.rateCardID && _vendor.status !== -1;
	}

	/**
	 * @method hasVendorCodes
	 * Validates if rateCard Selected has vendor codes.
	 * @return {boolean}
	 */
	public hasVendorCodes() {
		return this.vendorsFiltered && this.vendorsFiltered.length > 0;
	}

	/**
	 * @method hasRateCards
	 * Validates if there exists rateCards in the list.
	 * @return {boolean}
	 */
	public hasRateCards() {
		return this.rateCardList && this.rateCardList.length > 0;
	}

	/**
	 * @method filterVendors
	 * Filter vendors by category when a category is selected to display children.
	 * @private
	 * @param {Number} _rateCardID the category ID to filter.
	 * @return {void}
	 */
	public filterVendors(_rateCardID) {
		if (!_rateCardID || !this.vendorList) {
			return;
		}
		this.vendorsFiltered = _.filter(this.vendorList, (_vendor) => _vendor.rateCardId === _rateCardID);
		this.reorderVendors();
	}

	/**
	 * @method reorderVendors
	 * Routine that helps to sort the Vendor by RateCard to display them into UI control
	 * @return {void}
	 */
	public reorderVendors() {
		if (!this.vendorsFiltered) {
			return;
		}
		// Order the array using ascendent way
		this.vendorsFiltered.sort((a, b) => {
			const aName = a.name;
			const bName = b.name;
			if (aName.toLowerCase() > bName.toLowerCase()) {
				return 1;
			}
			if (aName.toLowerCase() < bName.toLowerCase()) {
				return -1;
			}
			// a must be equal to b
			return 0;
		});
	}

	/**
	 * @method removeVendorFromList
	 * Deletes vendor code from array. If dataManager request responses success, it reloads the data.
	 * @param _vendorCodeResponse Response from dataManager request, forces the delete from array.
	 * @param _vendorItem The item to remove.
	 * @return {void}
	 */
	public async removeVendorFromList(_vendorCodeResponse, _vendorItem) {
		if (!_vendorCodeResponse) {
			const index = _.findIndex(this.vendorList, (_vendor) => {
				return _vendor.id === _vendorItem.id;
			});

			if (index > -1) {
				this.vendorList.splice(index, 1);
				this.filterVendors(this.rateCardSelected.id);
			}
			return;
		}
		this.showLoader();
		await this.loadData();
		const rateCard = _.find(this.rateCardList, {
			id: _vendorCodeResponse.id,
		});
		if (rateCard) {
			this.selectRateCard(rateCard);
		}
		this.hideLoader();
	}
	/**
	 * @method handleDialogSubmitButtonClick
	 * Handles the dialog submission button click event.
	 * @param _evt The default event from click event.
	 * @param _dialogActions The dialog template actions to process the data.
	 * @return {void}
	 */
	public async handleDialogSubmitButtonClick(_evt) {
		doLog && console.log(LOG_TAG, 'handleDialogSubmitButtonClick');
		const { actionType, item } = this.dialogRefComponent || {};
		if (!actionType) {
			return;
		}
		let action;
		// Gets the name of the rateCard after the user clicks save.
		// This is to prevent on item edition to display changes by ngChange effect
		// in the list displayed when the dialog is open.
		switch (actionType.type) {
			case 'ratecard':
				item.name = this.dialogRefComponent.rateCardName || item.name;
				break;
			case 'vendor':
				item.name = this.dialogRefComponent.vendorCodeName || item.name;
				item.points = this.dialogRefComponent.vendorPoints || item.points;
				break;
			default:
				// nothing to do
				break;
		}
		switch (actionType.action) {
			case 'add':
				action = this.addNewItem(actionType.type, item);
				break;
			case 'edit':
				action = this.editItem(actionType.type, item);
				break;
			case 'delete':
				action = this.deleteItem(actionType.type, item);
				break;
			default:
				this.hideLoader();
				break;
		}
		this.dialogRef.close();
		await action;
	}

	/**
	 * @method handleDialogCloseButtonClick
	 * Handles the dialog cancel button click event.
	 * @param _evt The default event from click event.
	 * @return {void}
	 */
	public handleDialogCloseButtonClick(_evt) {
		this.dialogRef.close();
	}

	/**
	 * @method onDoneButtonClick
	 * Shows a reminder to user before leaving the settings view.
	 * @param {Object} _evt the `RemoveItemButton` click event.
	 * @param {TemplateRef} _templateActions dialogActions for the template that should be displayed.
	 * @return {void}
	 */
	public onDoneButtonClick(_evt, _templateActions) {
		this.openReminderDialog('Reminder', _templateActions, 195);
	}

	/**
	 * @method handleDialogReminderClick
	 * Handle the `DialogReminder` click to close dialog and then return to dashboard.
	 * @param {Object} _evt the `DialogReminder` click event.
	 * @return {void}
	 */
	public handleDialogReminderClick(_evt) {
		this.dialogRef.close();
		this.goBackToDashboard();
	}

	/**
	 * @method goBackToDashboard
	 * Return to dashboard module.
	 * @return {void}
	 */
	public async goBackToDashboard() {
		this.showLoader();
		_.defer(async () => {
			await this._dataManager.fetchRateCardsWithVersion();
			this._router.navigate([this.validPath]);
		});
	}

	/**
	 * @method openReminderDialog
	 * Method that opens the Reminder dialog to user prior to leaving the settings view.
	 * @param {String} _tittle tittle text for the dialog.
	 * @param {TemplateRef} _templateActions dialogActions for the template that should be displayed.
	 * @param {Number} _height the height of the dialog pop up
	 * @return {void}
	 */
	private openReminderDialog(_tittle, _templateActions, _height = 195) {
		this.dialogRef = this._dialogService.open({
			title: _tittle,
			content: VendorDialogComponent,
			actions: _templateActions,
			height: _height,
		});

		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.message = 'Remember to publish any changes you made on this screen.';
	}

	/**
	 * @method addNewItem
	 * Adds new item to the rateCards or vendors list and sends the request to the database.
	 * @param _type The type of data to add
	 * @param _item The item data to add.
	 * @return {void}
	 */
	private async addNewItem(_type, _item) {
		doLog && console.log(LOG_TAG, 'addNewItem', _type, _item);
		this.showLoader();
		switch (_type) {
			case 'ratecard':
				try {
					const rateCardResponse = await this._dataManager.createRateCard({
						name: _item.name,
					});
					if (rateCardResponse) {
						this.rateCardList.unshift(rateCardResponse);
						this.selectRateCard(rateCardResponse);
						this.reorderRateCards();
					}
					this.hideLoader();
				} catch (_error) {
					this.hideLoader();
					throw Error(_error);
				}
				break;
			case 'vendor':
				try {
					const rateCardSelected = this.rateCardSelected;
					this.rateCardSelected = _.find(this.rateCardList, (_rateCard) => _item.rateCardId === _rateCard.id) || rateCardSelected;
					const vendorCodeResponse = await this._dataManager.createVendorCode(_item, this.rateCardSelected);
					const rateCard = _.find(this.rateCardList, (_rateCard) => _rateCard.id === vendorCodeResponse.rateCardId);
					if (vendorCodeResponse && !vendorCodeResponse.versionId) {
						await this.loadData();
						this.selectRateCard(rateCard[0]);
						this.hideLoader();
						return;
					}
					this.vendorsFiltered.unshift(vendorCodeResponse);
					this.vendorList.unshift(vendorCodeResponse);
					this.selectRateCard(rateCard[0]);
					this.reorderVendors();
					this.hideLoader();
				} catch (_error) {
					this.hideLoader();
					throw Error(_error);
				}
				break;
			default:
				// nothing to do
				break;
		}
	}

	/**
	 * @method editItem
	 * Edit the items's data and sends the request to the database to update.
	 * @param _type The type of data to update
	 * @param _item The item data to update.
	 * @return {void}
	 */
	private async editItem(_type, _item) {
		if (!_item) {
			return;
		}
		this.showLoader();
		switch (_type) {
			case 'ratecard':
				try {
					const rateCard = _.find(this.rateCardList, { id: _item.id });
					if (!rateCard) {
						return;
					}
					const updatedRateCard = {
						id: _item.id,
						name: _item.name,
					};
					const rateCardResponse = await this._dataManager.updateRateCard(updatedRateCard);
					if (rateCardResponse) {
						rateCard.name = rateCardResponse.name;
						this.reorderRateCards();
					}
					this.hideLoader();
				} catch (_error) {
					this.hideLoader();
					throw Error(_error);
				}
				break;
			case 'vendor':
				const originalVendorCode = _.find(this.vendorList, {
					id: _item.id,
				});
				if (originalVendorCode) {
					const updatedVendorCode = {
						id: _item.id,
						name: _item.name,
						points: _item.points,
						rateCardId: this.rateCardSelected.id,
					};

					try {
						const vendorCodeResponse = await this._dataManager.updateVendorCode(updatedVendorCode, this.rateCardSelected);
						if (vendorCodeResponse && vendorCodeResponse.versionId) {
							_.extend(originalVendorCode, vendorCodeResponse);
							const rateCardToSelect = _.find(this.rateCardList, {
								id: vendorCodeResponse.rateCardId,
							});
							this.selectRateCard(rateCardToSelect);
							this.reorderVendors();
						} else {
							this.showLoader();
							await this.loadData();
							const rateCard = _.find(this.rateCardList, {
								id: vendorCodeResponse.id,
							});
							if (rateCard) {
								this.selectRateCard(rateCard);
							}
						}
						this.hideLoader();
					} catch (_error) {
						this.hideLoader();
						throw Error(_error);
					}
				}
				break;
			default:
				// nothing to do
				break;
		}
	}

	/**
	 * @method deleteItem
	 * Deletes the item from array and sends the request to the database to update.
	 * @param _type The type of data to delete
	 * @param _item The item data to delete.
	 * @return {void}
	 */
	private async deleteItem(_type, _item) {
		if (!_item) {
			return;
		}
		this.showLoader();
		switch (_type) {
			case 'ratecard':
				try {
					const rateCard = _.find(this.rateCardList, { id: _item.id });
					if (!rateCard) {
						return;
					}
					this.showLoader();
					await this._dataManager.deleteRateCard(rateCard.id);
					this.removeRateCardFromList(rateCard);
					this.hideLoader();
				} catch (_error) {
					this.hideLoader();
					throw Error(_error);
				}
				break;
			case 'vendor':
				const originalVendorCode = _.find(this.vendorList, {
					id: _item.id,
				});
				_.extend(_item, {
					rateCard: this.rateCardSelected,
				});
				if (originalVendorCode) {
					try {
						this.showLoader();
						const vendorCodeResponse = await this._dataManager.deleteVendorCode(_item);
						await this.removeVendorFromList(vendorCodeResponse, _item);
						this.hideLoader();
					} catch (_error) {
						this.hideLoader();
						throw Error(_error);
					}
				}
				break;
			default:
				this.hideLoader();
				break;
		}
	}

	/**
	 * @method showLoader
	 * Displays the loading screen
	 * @private
	 * @return {void}
	 */
	private showLoader() {
		this._busyService.showLoading();
	}

	/**
	 * @method hideLoader
	 * Hides the loading screen
	 * @private
	 * @return {void}
	 */
	private hideLoader() {
		this._busyService.hideLoading();
	}

	/**
	 * @method initialize
	 * Initializes the component
	 * @private
	 * @return {void}
	 */
	private initialize() {
		this.showLoader();
		this.loadData();
		const permissions = this._auth.getUserPermissions() || DEFAULT_PERMISSION;
		if (permissions) {
			this.validPath = `/${permissions}/dashboard`;
		}
		this._layoutService.setNavControlsVisibility(false);
		if (!this._router.url.includes('/dashboard')) {
			this._layoutService.hideRateCardSelectors();
		}
	}
}
