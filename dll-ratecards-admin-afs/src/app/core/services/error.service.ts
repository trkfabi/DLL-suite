import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AppSettings, doLog } from '../app-settings';

import { DialogCloseResult, DialogRef, DialogService } from '@progress/kendo-angular-dialog';
import { BusyService } from './busy.service';
import { LayoutService } from './layout.service';
import { ToastService } from './toaster.service';

import { ErrorDialogComponent } from '@shared/components/shared/error-dialog/error-dialog.component';
const TAB_SELECTED = 'tabSelected';

/**
 * @class core.services.ErrorService
 * handle the errors
 * @uses angular.core.Injectable
 * @uses moment
 * @version 1.0.0
 */
@Injectable()
export class ErrorService {
	/*
	 * @property {Object} dialogRef stores the reference to the dialog generated by the `DialogService`
	 * @private
	 */
	private dialogRef: DialogRef;

	/*
	 * @property {Object} dialogRefComponent stores the instance reference from the dialog component generated by the `DialogService`
	 * @private
	 */
	private dialogRefComponent;

	constructor(
		private _appSettings: AppSettings,
		private _dialogService: DialogService,
		private _router: Router,
		private _toaster: ToastService,
		private _busyService: BusyService,
		private _layoutService: LayoutService
	) {}

	/*
	 * @method validateResponseError
	 * call a Dialog for error
	 * @param {Object} _responseError eror object.
	 * @return {void}
	 */
	public validateResponseError(_responseError) {
		if (!_responseError || this._layoutService.modalIsOpen) {
			return;
		}
		const { error } = _responseError || {};
		const errorCode = 10;
		if (error && error.code === errorCode) {
			this._busyService.hideLoading();
			const message = _responseError.error.message;
			this.validateResponseErrorCustom(message);
			return;
		}
		this.dialogRef = this._dialogService.open({
			title: 'Unexpected error',
			content: ErrorDialogComponent,
			height: 130,
		});
		this._layoutService.modalIsOpen = true;
		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.dialogRefComponentReference = this.dialogRef;
		this.dialogRefComponent.message = 'An error has ocurred. Please try again or contact your administrator.';
		this._toaster.clear();
		this._busyService.hideLoading();
	}

	/*
	 * @method validateResponseErrorLogin
	 * call a Dialog for error
	 * @param {Object} _responseError eror object.
	 * @return {void}
	 */
	public validateResponseErrorLogin(_responseError) {
		if (!_responseError) {
			return;
		} else {
			this.dialogRef = this._dialogService.open({
				title: 'Unexpected error',
				content: ErrorDialogComponent,
			});
			this.dialogRefComponent = this.dialogRef.content.instance;
			this.dialogRefComponent.dialogRefComponentReference = this.dialogRef;
			this.dialogRefComponent.message = 'An error has ocurred, Please try again or contact your administrator.';
		}
	}

	/*
	 * @method validateResponseErrorCustom
	 * call a Dialog for Custom error and redirect if needed
	 * @param {Object} _responseError eror object.
	 * @return {void}
	 */
	public validateResponseErrorCustom(_errorMsg, _redirect = '') {
		this.dialogRef = this._dialogService.open({
			title: 'Unexpected error',
			content: ErrorDialogComponent,
		});
		this.dialogRefComponent = this.dialogRef.content.instance;
		this.dialogRefComponent.dialogRefComponentReference = this.dialogRef;
		this.dialogRefComponent.message = _errorMsg;
		localStorage.setItem(TAB_SELECTED, 'inputs');
		if (_redirect) {
			this._router.navigate([_redirect]);
		}
	}
}
