const _ = require('lodash');

/**
 * Utility functions for apis and libraries
 * @class Helpers.helpers
 * @singleton
 */

const LOG_TAG = '\x1b[36m' + '[helpers/helpers]' + '\x1b[39;49m ';

const Helpers = (function () {
	// +-------------------
	// | Private members.
	// +-------------------

	// +-------------------
	// | Public members.
	// +-------------------

	/**
	 * @method log
	 * Similar to console.log, with error handling
	 * @param {*} _params options to log
	 * @return {void}
	 */
	const log = (..._params) => {
		try {
			doLog && console.log(_params.map(value => {
				if (typeof value === 'string') {
					return value;
				}
				return JSON.stringify(value);
			}).join(' - '));
		} catch (error) {
			console.trace(`Error logging!!`);
		}
	};

	/**
	 * @method handleError
	 * Hanles an Error exception in a request and sends the expected data 
	 * in the response
	 * @param {object} error Error object
	 * @param {object} resp Response object from the request
	 * @param {object} req Request object from the request
	 * @param {Function} next Callbck called once the request completes
	 * @return {void}
	 */
	const handleError = (error, req, resp, next) => {
		try {
			sendError();
		} catch (err) {
			log(LOG_TAG, 'handleError', 'error sending error', err.message, err.stack);

			resp
				.status(500)
				.json({
					message: 'An error occured.',
					success: false
				});
			next();
		}

		function sendError() {
			const {
				stack,
				name
			} = error;

			log(LOG_TAG, 'handleError', 'sendError', {
				stack,
				name,
			});

			switch (name) {
			case 'StatusCodeError':
				{
					const {
						statusCode,
						response: {
							body,
							headers: {
								'content-type': contentType
							}
						}
					} = error;

					resp.set('Content-Type', contentType);
					resp.status(statusCode)
					.send(body);
					next();
					break;
				}
			case 'RequestError':
			case 'DataError':
				{
					let {
						code,
						status = 500,
						message = 'An error occured',
						cause: {
							code: causeCode = ''
						} = {}
					} = error;

					if (causeCode === 'ECONNREFUSED') {
						status = 503;
						message = 'Service is inactive.';
						code = -1;
					}

					resp
					.status(status)
					.json({
						message,
						code,
						success: false
					});
					next();
					return;
				}
			default:
				resp
					.status(500)
					.json({
						message: 'Internal Error',
						success: false
					});
				next();
			}
		}
	};

	/**
	 * @method compact
	 * removes any property with `undefined` as value
	 * @param {object} object object to compact
	 * @return {object}
	 */
	const compact = (object) => {
		// doLog && console.log(LOG_TAG, '- compact');

		let result = {};
		_.each(object, (value, key) => {
			if (value !== undefined) {
				result[key] = value;
			}
		});

		return result;
	};

	/**
	 * @method toCsv
	 * Converts an array to an csv ready text string
	 * @param {object} array array to transform
	 * @return {String}
	 */
	const toCsv = array => {
		const schema = _.extend({}, ...array);
		const headers = Object.keys(schema).map(header =>
			header.replace(/,/g, '.')
		);

		return [
			headers.join(','),
			...array.map(row => {
				return _.map(schema, (value, index) => {
					let input = row[index] || '';
					if (input && input.indexOf(',') > 0) {
						input = '"' + input.replace(/"/g, '""') + '"';
					}
					return ('' + (input));
				}).join(',');
			})
		].join('\n');
	};

	/**
	 * @method presetVar
	 * @private
	 * checks for a flag in `argv` and returns its value or a default
	 * @param {string} flagName Name of the flag to look for
	 * @param {string} flagShort Shorthand of the flag, if any
	 * @param {*} defaultValue value to use if the value is not declared in flags
	 * @param {object} argv={} Complete list of arguments generated by `minimist` or a similar tool.
	 * @return {*}
	 */
	function presetVar(flagName, flagShort, defaultValue, argv = {}) {
		let result = argv[flagName];

		if (result != null) {
			return result;
		}

		result = argv[flagShort];

		if (result != null) {
			return result;
		}

		return defaultValue;
	}

	return {
		log,
		handleError,
		compact,
		toCsv,
		presetVar,
	};
})();

module.exports = Helpers;
